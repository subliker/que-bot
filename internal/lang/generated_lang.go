/** Code generated using https://github.com/MrNemo64/go-n-i18n 
 * Any changes to this file will be lost on the next tool run */

package lang

import (
    "fmt"
    "strings"
)

func MessagesFor(tag string) (Messages, bool) {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}, true
    }
    return nil, false
}

func MessagesForMust(tag string) Messages {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}
    }
    panic(fmt.Errorf("unknwon language tag: " + tag))
}

func MessagesForOrDefault(tag string) Messages {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}
    }
    return ru_RU_Messages{}
}

type Messages interface{
    StartMessage() startMessage
    Query() query
    Callback() callback
}
type startMessage interface{
    Head(user_name string) string
    Main(bot_user_name string) string
}
type query interface{
    Main() querymain
    Btns() querybtns
}
type querymain interface{
    Title(queue_name string) string
    Description() string
    Text(queue_name string) string
    TextNoGroup() string
}
type querybtns interface{
    New() string
}
type callback interface{
    QueueNew() callbackqueueNew
    Queue() callbackqueue
    Btns() callbackbtns
}
type callbackqueueNew interface{
    Main(queue_name string) string
}
type callbackqueue interface{
    Head(queue_name string) string
    Member(num int, first_name string, last_name string, user_name string) string
}
type callbackbtns interface{
    SubmitFirst() string
    Submit(num int) string
}

type ru_RU_Messages struct{}
func (ru_RU_Messages) StartMessage() startMessage {
    return ru_RU_startMessage{}
}
type ru_RU_startMessage struct{}
func (ru_RU_startMessage) Head(user_name string) string {
    if user_name == "" {
        return "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú®"
    } else {
        return fmt.Sprintf("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! ‚ú®", user_name)
    }
}
func (ru_RU_startMessage) Main(bot_user_name string) string {
    return "<i>–Ø —É–ø—Ä–æ—â–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω—è—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏!</i> üî≤" + "\n" +
        "" + "\n" +
        "<i>–ó–Ω–∞–∫–æ–º–æ, —á—Ç–æ –≤–µ—Å—å —á–∞—Ç –≤ —Ä–∞–∑–Ω–æ–±–æ–π –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–∞?</i> ü•≤" + "\n" +
        "<b>–ü–æ–¥–æ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ–Ω—è</b> ü§©" + "\n" +
        "" + "\n" +
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ inline. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è. üí¨" + "\n" +
        fmt.Sprintf(" 1. –í–≤–µ–¥–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫–µ @%s", bot_user_name) + "\n" +
        " 2. –ù–∞–∂–º–∏—Ç–µ –ø–æ—è–≤–∏–≤—à—É—é—Å—è –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã(–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞-placeholder)" + "\n" +
        "" + "\n" +
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, —É–≤–∏–¥–∏–º—Å—è —Ç–∞–º!"
}
func (ru_RU_Messages) Query() query {
    return ru_RU_query{}
}
type ru_RU_query struct{}
func (ru_RU_query) Main() querymain {
    return ru_RU_querymain{}
}
type ru_RU_querymain struct{}
func (ru_RU_querymain) Title(queue_name string) string {
    if queue_name != "" {
        return fmt.Sprintf("–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å %s üî®", queue_name)
    } else {
        return "–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å üî®"
    }
}
func (ru_RU_querymain) Description() string {
    return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏"
}
func (ru_RU_querymain) Text(queue_name string) string {
    if queue_name != "" {
        return fmt.Sprintf("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å *%s*, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üöÄ", queue_name)
    } else {
        return "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üöÄ"
    }
}
func (ru_RU_querymain) TextNoGroup() string {
    return "–û—á–µ—Ä–µ–¥—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ! ü´•"
}
func (ru_RU_query) Btns() querybtns {
    return ru_RU_querybtns{}
}
type ru_RU_querybtns struct{}
func (ru_RU_querybtns) New() string {
    return "üî® –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å üî®"
}
func (ru_RU_Messages) Callback() callback {
    return ru_RU_callback{}
}
type ru_RU_callback struct{}
func (ru_RU_callback) QueueNew() callbackqueueNew {
    return ru_RU_callbackqueueNew{}
}
type ru_RU_callbackqueueNew struct{}
func (ru_RU_callbackqueueNew) Main(queue_name string) string {
    return fmt.Sprintf("–û—á–µ—Ä–µ–¥—å –Ω–∞ *%s* –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—É—Å—Ç–∞! –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º üòé", queue_name)
}
func (ru_RU_callback) Queue() callbackqueue {
    return ru_RU_callbackqueue{}
}
type ru_RU_callbackqueue struct{}
func (ru_RU_callbackqueue) Head(queue_name string) string {
    return fmt.Sprintf("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥—å –Ω–∞ *%s* –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º üìí:", queue_name)
}
func (ru_RU_callbackqueue) Member(num int, first_name string, last_name string, user_name string) string {
    return fmt.Sprintf("%d. [%s %s](https://t.me/%s)", num, first_name, last_name, user_name)
}
func (ru_RU_callback) Btns() callbackbtns {
    return ru_RU_callbackbtns{}
}
type ru_RU_callbackbtns struct{}
func (ru_RU_callbackbtns) SubmitFirst() string {
    return "–Ø –ø–µ—Ä–≤—ã–π! ü•á"
}
func (ru_RU_callbackbtns) Submit(num int) string {
    if num >= 30 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ ü´°"
    } else if num >= 25 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ ü´†"
    } else if num >= 20 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ üò±"
    } else if num >= 15 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ üò®"
    } else if num >= 10 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ ü•≤"
    } else if num >= 5 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ ü§†"
    } else if num < 5 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ üòÅ"
    } else {
        return fmt.Sprintf("%d", num)
    }
}


