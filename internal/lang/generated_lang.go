/** Code generated using https://github.com/MrNemo64/go-n-i18n 
 * Any changes to this file will be lost on the next tool run */

package lang

import (
    "fmt"
    "strings"
)

func MessagesFor(tag string) (Messages, bool) {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}, true
    }
    return nil, false
}

func MessagesForMust(tag string) Messages {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}
    }
    panic(fmt.Errorf("unknwon language tag: " + tag))
}

func MessagesForOrDefault(tag string) Messages {
    switch strings.ReplaceAll(tag, "_", "-") {
    case "ru-RU":
        return ru_RU_Messages{}
    }
    return ru_RU_Messages{}
}

type Messages interface{
    StartMessage() startMessage
    Query() query
    Callback() callback
    Errors() errors
}
type startMessage interface{
    Head(user_name string) string
    Main(bot_user_name string) string
}
type query interface{
    Queue() queryqueue
    PlacedQueue() queryplacedQueue
    Btns() querybtns
    TextNoGroup() string
    IncorrectCount() string
}
type queryqueue interface{
    Title(queue_name string) string
    Description() string
    Text(queue_name string) string
}
type queryplacedQueue interface{
    Title(queue_name string, queue_count int) string
    Description() string
    Text(queue_name string, queue_count int) string
}
type querybtns interface{
    New() string
}
type callback interface{
    QueueNew() callbackqueueNew
    Queue() callbackqueue
    PlacedQueue() callbackplacedQueue
    Btns() callbackbtns
}
type callbackqueueNew interface{
    Main(queue_name string) string
}
type callbackqueue interface{
    Head(queue_name string) string
    Member(num int, first_name string, last_name string, user_name string) string
}
type callbackplacedQueue interface{
    Main(queue_name string) string
    Member(num int, first_name string, last_name string) string
}
type callbackbtns interface{
    SubmitFirst() string
    Submit(num int) string
    Remove() string
    Relive() string
}
type errors interface{
    ButtonDataLength() string
    QueueNotFound() string
    Tail() string
    Internal() string
    SubmitAgain() string
    RemoveIfNot() string
    QueueIdCollision() string
    RetryAfter() string
}

type ru_RU_Messages struct{}
func (ru_RU_Messages) StartMessage() startMessage {
    return ru_RU_startMessage{}
}
type ru_RU_startMessage struct{}
func (ru_RU_startMessage) Head(user_name string) string {
    if user_name == "" {
        return "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ‚ú®"
    } else {
        return fmt.Sprintf("‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! ‚ú®", user_name)
    }
}
func (ru_RU_startMessage) Main(bot_user_name string) string {
    return "<i>–Ø —É–ø—Ä–æ—â–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω—è—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏!</i> üî≤" + "\n" +
        "" + "\n" +
        "<i>–ó–Ω–∞–∫–æ–º–æ, —á—Ç–æ –≤–µ—Å—å —á–∞—Ç –≤ —Ä–∞–∑–Ω–æ–±–æ–π –∑–∞–Ω–∏–º–∞–µ—Ç –º–µ—Å—Ç–∞?</i> ü•≤" + "\n" +
        "<b>–ü–æ–¥–æ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ–Ω—è</b> ü§©" + "\n" +
        "" + "\n" +
        "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ inline. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∏–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è. üí¨" + "\n" +
        fmt.Sprintf(" 1. –í–≤–µ–¥–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫–µ @%s", bot_user_name) + "\n" +
        " 2. –ù–∞–∂–º–∏—Ç–µ –ø–æ—è–≤–∏–≤—à—É—é—Å—è –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã(–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∞-placeholder)" + "\n" +
        "" + "\n" +
        "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, —É–≤–∏–¥–∏–º—Å—è —Ç–∞–º!"
}
func (ru_RU_Messages) Query() query {
    return ru_RU_query{}
}
type ru_RU_query struct{}
func (ru_RU_query) Queue() queryqueue {
    return ru_RU_queryqueue{}
}
type ru_RU_queryqueue struct{}
func (ru_RU_queryqueue) Title(queue_name string) string {
    if queue_name != "" {
        return fmt.Sprintf("–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å %s üî®", queue_name)
    } else {
        return "–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å üî®"
    }
}
func (ru_RU_queryqueue) Description() string {
    return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏"
}
func (ru_RU_queryqueue) Text(queue_name string) string {
    if queue_name != "" {
        return fmt.Sprintf("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å *%s*, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üöÄ", queue_name)
    } else {
        return "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üöÄ"
    }
}
func (ru_RU_query) PlacedQueue() queryplacedQueue {
    return ru_RU_queryplacedQueue{}
}
type ru_RU_queryplacedQueue struct{}
func (ru_RU_queryplacedQueue) Title(queue_name string, queue_count int) string {
    if queue_name != "" && queue_count!=0 {
        return fmt.Sprintf("–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å %s —Å %d –º–µ—Å—Ç–∞–º–∏ üî®", queue_name, queue_count)
    } else if queue_name != "" {
        return "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"
    } else if queue_count!=0 {
        return fmt.Sprintf("–°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Å %d –º–µ—Å—Ç–∞–º–∏ üî®", queue_count)
    } else {
        return "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç"
    }
}
func (ru_RU_queryplacedQueue) Description() string {
    return "–û—á–µ—Ä–µ–¥—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞(–æ—Ç 1 –¥–æ 100)"
}
func (ru_RU_queryplacedQueue) Text(queue_name string, queue_count int) string {
    if queue_name != "" && queue_count!=0 {
        return fmt.Sprintf("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å *%s* —Å %d –º–µ—Å—Ç–∞–º–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üöÄ", queue_name, queue_count)
    } else if queue_name != "" {
        return "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ—Ç 1 –¥–æ 100, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Å –º–µ—Å—Ç–∞–º–∏ üòâ"
    } else if queue_count!=0 {
        return fmt.Sprintf("–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Å %d –º–µ—Å—Ç–∞–º–∏, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üöÄ", queue_count)
    } else {
        return "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Å –º–µ—Å—Ç–∞–º–∏ üòâ"
    }
}
func (ru_RU_query) Btns() querybtns {
    return ru_RU_querybtns{}
}
type ru_RU_querybtns struct{}
func (ru_RU_querybtns) New() string {
    return "üî® –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å üî®"
}
func (ru_RU_query) TextNoGroup() string {
    return "–û—á–µ—Ä–µ–¥—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ! ü´•"
}
func (ru_RU_query) IncorrectCount() string {
    return "–ù–µ—É–∂–µ–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º? ü§®"
}
func (ru_RU_Messages) Callback() callback {
    return ru_RU_callback{}
}
type ru_RU_callback struct{}
func (ru_RU_callback) QueueNew() callbackqueueNew {
    return ru_RU_callbackqueueNew{}
}
type ru_RU_callbackqueueNew struct{}
func (ru_RU_callbackqueueNew) Main(queue_name string) string {
    if queue_name!="" {
        return fmt.Sprintf("–û—á–µ—Ä–µ–¥—å –Ω–∞ *%s* –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—É—Å—Ç–∞! –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º üòé", queue_name)
    } else {
        return "–û—á–µ—Ä–µ–¥—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—É—Å—Ç–∞! –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º üòé"
    }
}
func (ru_RU_callback) Queue() callbackqueue {
    return ru_RU_callbackqueue{}
}
type ru_RU_callbackqueue struct{}
func (ru_RU_callbackqueue) Head(queue_name string) string {
    if queue_name!="" {
        return fmt.Sprintf("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥—å –Ω–∞ *%s* –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º üìí:", queue_name)
    } else {
        return "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥—å –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º üìí:"
    }
}
func (ru_RU_callbackqueue) Member(num int, first_name string, last_name string, user_name string) string {
    return fmt.Sprintf("%d. [%s %s](https://t.me/%s)", num, first_name, last_name, user_name)
}
func (ru_RU_callback) PlacedQueue() callbackplacedQueue {
    return ru_RU_callbackplacedQueue{}
}
type ru_RU_callbackplacedQueue struct{}
func (ru_RU_callbackplacedQueue) Main(queue_name string) string {
    if queue_name!="" {
        return fmt.Sprintf("–û—á–µ—Ä–µ–¥—å *%s* —Å –º–µ—Å—Ç–∞–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö ‚úåÔ∏è", queue_name)
    } else {
        return "–û—á–µ—Ä–µ–¥—å —Å –º–µ—Å—Ç–∞–º–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö ‚úåÔ∏è"
    }
}
func (ru_RU_callbackplacedQueue) Member(num int, first_name string, last_name string) string {
    return fmt.Sprintf("%d. %s %s", num, first_name, last_name)
}
func (ru_RU_callback) Btns() callbackbtns {
    return ru_RU_callbackbtns{}
}
type ru_RU_callbackbtns struct{}
func (ru_RU_callbackbtns) SubmitFirst() string {
    return "–Ø –ø–µ—Ä–≤—ã–π! ü•á"
}
func (ru_RU_callbackbtns) Submit(num int) string {
    if num >= 30 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ ü´°"
    } else if num >= 25 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ ü´†"
    } else if num >= 20 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ üò±"
    } else if num >= 15 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ üò®"
    } else if num >= 10 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ ü•≤"
    } else if num >= 5 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ ü§†"
    } else if num < 5 {
        return "–ó–∞–Ω—è—Ç—å –º–µ—Å—Ç–æ üòÅ"
    } else {
        return fmt.Sprintf("%d", num)
    }
}
func (ru_RU_callbackbtns) Remove() string {
    return "–£–¥–∞–ª–∏ –º–µ–Ω—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ‚ùå"
}
func (ru_RU_callbackbtns) Relive() string {
    return "–í–æ–∑—Ä–æ–¥–∏—Ç—å –æ—á–µ—Ä–µ–¥—å! ‚õ™"
}
func (ru_RU_Messages) Errors() errors {
    return ru_RU_errors{}
}
type ru_RU_errors struct{}
func (ru_RU_errors) ButtonDataLength() string {
    return "–ê–≤—Ç–æ—Ä –Ω–∞–ø–æ—Ä—Ç–∞—á–∏–ª —Å –±–∞–π—Ç–∞–º–∏..." + "\n" +
        "–°–¥–µ–ª–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∫–æ—Ä–æ—á–µ, –æ—Ç —ç—Ç–æ–≥–æ –º–∏—Ä—É —Å—Ç–∞–Ω–µ—Ç –ª—É—á—à–µ üòâ"
}
func (ru_RU_errors) QueueNotFound() string {
    return "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å —É–∂–µ –ø–æ—Ç–µ—Ä—è–ª–∞ —Å–≤—è–∑—å —Å —ç—Ç–∏–º –º–∏—Ä–æ–º ü•≤" + "\n" +
        "–ù–µ –≤–ø–∞–¥–∞–π—Ç–µ –≤ –æ—Ç—á–∞—è–Ω—å–µ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é üßü"
}
func (ru_RU_errors) Tail() string {
    return "" + "\n" +
        "" + "\n" +
        "_–ü—Ä–æ—à—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ —Å–∫–æ—Ä–µ–Ω—å–∫–æ –ø–æ—á–∏–Ω–∏–ª üî®‚öôÔ∏è_" + "\n" +
        "_üéµ —Åall me maybe üéµ_"
}
func (ru_RU_errors) Internal() string {
    return "–í–æ–∑–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ üò£"
}
func (ru_RU_errors) SubmitAgain() string {
    return "–ù–µ–∞, –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç üõ°Ô∏è"
}
func (ru_RU_errors) RemoveIfNot() string {
    return "–¢–µ–±–µ –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏, –Ω–µ —Ç—Ä–∞—Ç—å –º–æ–µ –≤—Ä–µ–º—è ü§†"
}
func (ru_RU_errors) QueueIdCollision() string {
    return "–° —à–∞–Ω—Å–æ–º 0,0000059605% –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–æ–ª–ª–∏–∑–∏—è id –æ—á–µ—Ä–µ–¥–∏, –ø–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å–Ω–æ–≤–∞ ü§™"
}
func (ru_RU_errors) RetryAfter() string {
    return "–¢—ã —á–µ-—Ç–æ –ø–µ—Ä–µ–±–æ—Ä—â–∏–ª —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ üò®"
}


